{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/goktugkoyun/Desktop/SecondTimeReact/29thNextJS-MeetUpProject/pages/[meetupId]/index.js\";\nimport { Fragment } from \"react\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.image\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/goktugkoyun/Desktop/SecondTimeReact/29thNextJS-MeetUpProject/pages/[meetupId]/index.js"],"names":["Fragment","MeetupDetail","MeetupDetails","props","meetupData","image","title","address"],"mappings":";;AACA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AAEA,IAAA,KAAK,EAAIA,KAAK,CAACC,UAAN,CAAiBC,KAF1B;AAGA,IAAA,KAAK,EAAGF,KAAK,CAACC,UAAN,CAAiBE,KAHzB;AAIE,IAAA,OAAO,EAAGH,KAAK,CAACC,UAAN,CAAiBG,OAJ7B;AAKE,IAAA,WAAW,EAAGJ,KAAK,CAACC,UAAN,CAAiBC;AALjC;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;KAVQH,a;;AAmET,eAAeA,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport { Fragment } from \"react\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return (\n    <MeetupDetail\n\n    image = {props.meetupData.image}\n    title= {props.meetupData.title}\n      address= {props.meetupData.address}\n      description= {props.meetupData.image}\n    ></MeetupDetail>\n  );\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Seann85:Olabilir8@cluster0.n5kck.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray(); // Empty curly braces means i wanna find all\n  // the second argument is define which are to be extracted for example our second argument is _id\n  // so only the id will be shown not anything else\n\n\n  client.close();\n  return {\n    fallback: false,\n\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    }))\n  };\n}\n\nexport async function getStaticProps(context) {\n  // fetch data for a single meetup\n\n  // you cant use react hooks in here\n\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://Seann85:Olabilir8@cluster0.n5kck.mongodb.net/?retryWrites=true&w=majority\"\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\nconst selectedMeetup = await meetupsCollection.findOne({_id: ObjectId(meetupId)})  \n\n\n  client.close();\n  return {\n    props: {\n      meetupData: {\n          id: selectedMeetup._id.toString(),\n          title: selectedMeetup.title,\n          address: selectedMeetup.address,\n          image: selectedMeetup.image,\n          description: selectedMeetup.description,\n      },\n\n    },\n  };\n}\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}